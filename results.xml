<?xml version="1.0" encoding="utf-8"?>
<testsuites>
  <testsuite id="0" name="cargo test #0" package="testsuite/cargo test #0" tests="121" errors="0" failures="1" hostname="localhost" timestamp="2021-09-29T08:06:06.258177+00:00" time="0">
    <testcase name="test_shrink" classname="arb::arb_bits64::arbitrary_bits64::utests" time="0" />
    <testcase name="test_shrink" classname="arb::arb_bits8::arbitrary_bits8::utests" time="0" />
    <testcase name="prop_from_to_bool" classname="bit::ptests" time="0" />
    <testcase name="prop_default" classname="bit::ptests" time="0" />
    <testcase name="prop_from_ref_u64" classname="bit::ptests" time="0" />
    <testcase name="prop_from_ref_u8" classname="bit::ptests" time="0" />
    <testcase name="prop_from_to_u64" classname="bit::ptests" time="0" />
    <testcase name="prop_from_to_ref_bool" classname="bit::ptests" time="0" />
    <testcase name="prop_from_to_u8" classname="bit::ptests" time="0" />
    <testcase name="prop_not" classname="bit::ptests" time="0" />
    <testcase name="prop_display" classname="bit::ptests" time="0" />
    <testcase name="prop_debug" classname="bit::ptests" time="0" />
    <testcase name="prop_and" classname="bit::ptests" time="0" />
    <testcase name="prop_and_assign" classname="bit::ptests" time="0" />
    <testcase name="prop_or" classname="bit::ptests" time="0" />
    <testcase name="prop_to_from_u64" classname="bit::ptests" time="0" />
    <testcase name="prop_to_from_bool" classname="bit::ptests" time="0" />
    <testcase name="prop_to_from_u8" classname="bit::ptests" time="0" />
    <testcase name="test_arbitrary_shrink" classname="bit::ptests" time="0" />
    <testcase name="prop_or_assign" classname="bit::ptests" time="0" />
    <testcase name="prop_to_ref_u64" classname="bit::ptests" time="0" />
    <testcase name="test_flip" classname="bits64::bits::utests" time="0" />
    <testcase name="prop_to_ref_u8" classname="bit::ptests" time="0" />
    <testcase name="test_get" classname="bits64::bits::utests" time="0" />
    <testcase name="test_len" classname="bits64::bits::utests" time="0" />
    <testcase name="prop_xor" classname="bit::ptests" time="0" />
    <testcase name="prop_xor_assign" classname="bit::ptests" time="0" />
    <testcase name="test_rst" classname="bits64::bits::utests" time="0" />
    <testcase name="test_set" classname="bits64::bits::utests" time="0" />
    <testcase name="test_combinators_combine" classname="bits64::combinators::utests" time="0" />
    <testcase name="test_one" classname="bits64::constructors::utests" time="0" />
    <testcase name="test_pow2" classname="bits64::constructors::utests" time="0" />
    <testcase name="test_split_at" classname="bits64::constructors::utests" time="0" />
    <testcase name="test_with_all_ones" classname="bits64::constructors::utests" time="0" />
    <testcase name="test_with_high_ones" classname="bits64::constructors::utests" time="0" />
    <testcase name="test_with_low_ones" classname="bits64::constructors::utests" time="0" />
    <testcase name="test_zero" classname="bits64::constructors::utests" time="0" />
    <testcase name="test_from_iter" classname="bits64::conversions::utests" time="0" />
    <testcase name="test_get" classname="bits64::helper::utests" time="0" />
    <testcase name="test_pow2" classname="bits64::helper::utests" time="0" />
    <testcase name="test_rst" classname="bits64::helper::utests" time="0" />
    <testcase name="test_set" classname="bits64::helper::utests" time="0" />
    <testcase name="prop_from_to_u8" classname="bits64::conversions::ptests" time="0" />
    <testcase name="test_enumerate" classname="bits64::iterator::utests" time="0" />
    <testcase name="test_into_iter" classname="bits64::iterator::utests" time="0" />
    <testcase name="test_iter" classname="bits64::iterator::utests" time="0" />
    <testcase name="test_add" classname="bits64::operators::utests" time="0" />
    <testcase name="test_add_and_assign" classname="bits64::operators::utests" time="0" />
    <testcase name="test_and" classname="bits64::operators::utests" time="0" />
    <testcase name="prop_form_to_vecu8" classname="bits64::conversions::ptests" time="0" />
    <testcase name="test_and_assign" classname="bits64::operators::utests" time="0" />
    <testcase name="test_not_assign" classname="bits64::operators::utests" time="0" />
    <testcase name="test_or" classname="bits64::operators::utests" time="0" />
    <testcase name="test_or_assign" classname="bits64::operators::utests" time="0" />
    <testcase name="test_shl" classname="bits64::operators::utests" time="0" />
    <testcase name="test_shl_assign" classname="bits64::operators::utests" time="0" />
    <testcase name="test_shr" classname="bits64::operators::utests" time="0" />
    <testcase name="test_shr_assign" classname="bits64::operators::utests" time="0" />
    <testcase name="test_sub" classname="bits64::operators::utests" time="0" />
    <testcase name="test_sub_and_assign" classname="bits64::operators::utests" time="0" />
    <testcase name="test_xor" classname="bits64::operators::utests" time="0" />
    <testcase name="test_xor_assign" classname="bits64::operators::utests" time="0" />
    <testcase name="test_rst_high_range" classname="bits64::range::utests" time="0" />
    <testcase name="test_rst_low_range" classname="bits64::range::utests" time="0" />
    <testcase name="test_set_high_range" classname="bits64::range::utests" time="0" />
    <testcase name="test_set_low_range" classname="bits64::range::utests" time="0" />
    <testcase name="test_with_range_ones" classname="bits64::range::utests" time="0" />
    <testcase name="test_with_range_zeros" classname="bits64::range::utests" time="0" />
    <testcase name="test_flip" classname="bits8::bits::utests" time="0" />
    <testcase name="test_get" classname="bits8::bits::utests" time="0" />
    <testcase name="test_len" classname="bits8::bits::utests" time="0" />
    <testcase name="test_rst" classname="bits8::bits::utests" time="0" />
    <testcase name="test_set" classname="bits8::bits::utests" time="0" />
    <testcase name="test_combinators_combine" classname="bits8::combinators::utests" time="0" />
    <testcase name="test_one" classname="bits8::constructors::utests" time="0" />
    <testcase name="test_pow2" classname="bits8::constructors::utests" time="0" />
    <testcase name="test_split_at" classname="bits8::constructors::utests" time="0" />
    <testcase name="test_with_all_ones" classname="bits8::constructors::utests" time="0" />
    <testcase name="test_with_high_ones" classname="bits8::constructors::utests" time="0" />
    <testcase name="test_with_low_ones" classname="bits8::constructors::utests" time="0" />
    <testcase name="test_zero" classname="bits8::constructors::utests" time="0" />
    <testcase name="prop_from_to_u8" classname="bits8::conversions::ptests" time="0" />
    <testcase name="test_get" classname="bits8::helper::utests" time="0" />
    <testcase name="prop_get" classname="bits8::helper::ptests" time="0" />
    <testcase name="prop_set" classname="bits8::helper::ptests" time="0" />
    <testcase name="prop_rst" classname="bits8::helper::ptests" time="0" />
    <testcase name="prop_pow2" classname="bits8::helper::ptests" time="0" />
    <testcase name="test_pow2" classname="bits8::helper::utests" time="0" />
    <testcase name="test_rst" classname="bits8::helper::utests" time="0" />
    <testcase name="prop_form_to_vecu8" classname="bits8::conversions::ptests" time="0" />
    <testcase name="prop_display" classname="bits8::formatting::ptests" time="0" />
    <testcase name="test_set" classname="bits8::helper::utests" time="0" />
    <testcase name="prop_debug" classname="bits8::formatting::ptests" time="0" />
    <testcase name="test_enumerate" classname="bits8::iterator::utests" time="0" />
    <testcase name="prop_display_debug" classname="bits8::formatting::ptests" time="0" />
    <testcase name="test_from_iter" classname="bits8::iterator::utests" time="0" />
    <testcase name="test_into_iter" classname="bits8::iterator::utests" time="0" />
    <testcase name="test_iter" classname="bits8::iterator::utests" time="0" />
    <testcase name="test_add" classname="bits8::operators::utests" time="0" />
    <testcase name="test_add_and_assign" classname="bits8::operators::utests" time="0" />
    <testcase name="test_and" classname="bits8::operators::utests" time="0" />
    <testcase name="test_not_assign" classname="bits8::operators::utests" time="0" />
    <testcase name="test_or" classname="bits8::operators::utests" time="0" />
    <testcase name="test_or_assign" classname="bits8::operators::utests" time="0" />
    <testcase name="test_and_assign" classname="bits8::operators::utests" time="0">
      <failure type="cargo test" message="thread &apos;bits8::operators::utests::test_and_assign&apos; panicked at &apos;assertion failed: `(left == right)`&#xA;  left: `1`,&#xA; right: `200`&apos;, yos_bits/src/bits8.rs:517:13&#xA;note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace&#xA;" />
    </testcase>
    <testcase name="test_shl" classname="bits8::operators::utests" time="0" />
    <testcase name="test_shl_assign" classname="bits8::operators::utests" time="0" />
    <testcase name="test_shr" classname="bits8::operators::utests" time="0" />
    <testcase name="test_shr_assign" classname="bits8::operators::utests" time="0" />
    <testcase name="test_sub" classname="bits8::operators::utests" time="0" />
    <testcase name="test_sub_and_assign" classname="bits8::operators::utests" time="0" />
    <testcase name="test_xor" classname="bits8::operators::utests" time="0" />
    <testcase name="test_xor_assign" classname="bits8::operators::utests" time="0" />
    <testcase name="test_rst_high_range" classname="bits8::range::utests" time="0" />
    <testcase name="test_rst_low_range" classname="bits8::range::utests" time="0" />
    <testcase name="test_set_high_range" classname="bits8::range::utests" time="0" />
    <testcase name="test_set_low_range" classname="bits8::range::utests" time="0" />
    <testcase name="test_with_range_ones" classname="bits8::range::utests" time="0" />
    <testcase name="test_with_range_zeros" classname="bits8::range::utests" time="0" />
    <testcase name="prop_debug" classname="bits64::formatting::ptests" time="0" />
    <testcase name="prop_display" classname="bits64::formatting::ptests" time="0" />
  </testsuite>
</testsuites>